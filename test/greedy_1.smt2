(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun X () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |IsMatch_/^(.+)(.?)$/_0| () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (let ((a!1 (re.++ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff"))))))
  (str.in.re |0 Fill 0| a!1)))
(assert (str.in.re |0 Fill 1|
           (re.union (str.to.re "")
                     (re.range "\x00" "\x09")
                     (re.range "\v" "\xff"))))
(assert (let ((a!1 (re.++ (re.union (re.range "\x00" "\x09") (re.range "\v" "\xff"))
                  (re.* (re.union (re.range "\x00" "\x09")
                                  (re.range "\v" "\xff")))
                  (re.union (str.to.re "")
                            (re.union (re.range "\x00" "\x09")
                                      (re.range "\v" "\xff"))))))
  (str.in.re X a!1)))
(assert (= X (str.++ |0 Fill 0| |0 Fill 1|)))
(assert (= |0 Fill 3| |0 Fill 0|))
(assert (= |0 Fill 4| |0 Fill 1|))
(assert (= X |0 Fill 2|))
(assert |IsMatch_/^(.+)(.?)$/_0|)
(assert (not (= |0 Fill 1| "")))

(check-sat)
