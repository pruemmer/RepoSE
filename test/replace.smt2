(declare-fun |0 Fill 0| () String)
(declare-fun |0 Fill 1| () String)
(declare-fun |0 Fill 2| () String)
(declare-fun |0 Fill 3| () String)
(declare-fun |0 Fill 4| () String)
(declare-fun X () String)
(declare-fun |IsMatch_/^(a\|b)$/_0| () Bool)
(define-funs-rec ( ( str.repeat ((x!1 String) (x!2 Int)) String)
                   ( str.whiteLeft ((x!1 String) (x!2 Int)) Int)
                   ( str.whiteRight ((x!1 String) (x!2 Int)) Int))
                 ( (ite (<= x!2 0)
                        ""
                        (str.++ x!1 ((_ str.repeat 0) x!1 (- x!2 1))))
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteLeft 0) x!1 (+ x!2 1))
                        x!2)
                   (ite (= (str.at x!1 x!2) " ")
                        ((_ str.whiteRight 0) x!1 (- x!2 1))
                        x!2)))
(assert (= |0 Fill 0| "a"))
(assert (= |0 Fill 1| "b"))
(assert (or (= |0 Fill 2| "a") (= |0 Fill 2| "b")))
(assert (str.in.re |0 Fill 2| (re.union (str.to.re "a") (str.to.re "b"))))
(assert (= |0 Fill 3| |0 Fill 2|))
(assert (= |0 Fill 4| |0 Fill 2|))
(assert (let ((a!1 (not (str.in.re X (re.union (str.to.re "a") (str.to.re "b"))))))
  (or a!1 (= X |0 Fill 2|))))
(assert (= (str.in.re X (re.union (str.to.re "a") (str.to.re "b")))
   |IsMatch_/^(a\|b)$/_0|))
(assert |IsMatch_/^(a\|b)$/_0|)
(assert (let ((a!1 (str.substr X 0 (ite (<= (str.len X) 0) (str.len X) 0)))
      (a!3 (ite (>= (+ (str.len X) (str.len |0 Fill 2|)) 0)
                (+ (str.len X) (str.len |0 Fill 2|))
                0)))
(let ((a!2 (= "" (ite (<= (str.len X) 0) "" a!1)))
      (a!4 (* (- 1) (ite (>= (str.len |0 Fill 2|) 0) (str.len |0 Fill 2|) a!3))))
(let ((a!5 (str.substr X
                       (ite (>= (str.len |0 Fill 2|) 0)
                            (str.len |0 Fill 2|)
                            a!3)
                       (+ (str.len X) a!4))))
(let ((a!6 (ite (<= (+ (str.len X) a!4) 0) "" a!5)))
  (not (and a!2 (= "" a!6))))))))

(check-sat)
